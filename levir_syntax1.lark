start: item+

// cminus cannot assign to mebers of expression. it must assing to a local

item: classdef | structdef | fndef | mthddef //| genitem

// genitem: "gen" "(" _genfor (classdef | structdef | fndef | mthddef) ")"
// _genfor: "for" "(" list{type, ","} ")"

list{val}: "(" (val ("," val)* ","?)? ")"
seq{val}: val*


classdef: "class" "("  name "," mbrs ")"
    | "class" name "(" mbrs ")"
structdef: "struct" "(" name "," mbrs ")"
    | "struct" name "(" mbrs ")"
fndef: "fn" "(" fnname "," rettype "," args "," locals "," frame ")"
    | "fn"  fnname ":" rettype args locals "(" frame ")"
     //| "fn" fnname args "->" rettype "(" locals "," frame ")"
mthddef: "mthd" "(" outertype "," name "," rettype "," args "," locals "," frame ")"
    | "mthd" outertype "." name ":" rettype args "(" locals "," frame ")"

frame: "frame" "(" stmt+ ")"

// info sets
mbrs: "mbrs" list{mbr}
    | seq{mbr}
mbr: "mbr" "(" mbrname "," type ")"
   | "." mbrname ":" type

args: "args"? list{arg}
arg: "arg" "(" argname "," type ")"
   | argname ":" type

locals: ("$" | "locals") list{lcl}
lcl: "lcl" "(" lclname "," type ")"
   | lclname ":" type

subject: var | mbrof
var: "var" "(" varname "," vartype")"
   | varname ":" vartype
mbrof: "mbrof" "(" varname "," vartype "," (mbr | mbrs) ")"
     | varname ":" vartype (mbr | mbrs)
ref:    "ref" "(" (var|mbrof) "," type ")"

// statments
stmt: asn_stmt      | ret_stmt      | brk_stmt
    | cont_stmt     | loop_stmt     | dbg_stmt
    | btw_stmt      | expr_stmt
asn_stmt: "asn" "(" subject "," expr "," type ")"
        | subject "=" expr ("<-" type)?

ret_stmt:  "ret" "(" expr "," type ")"
        | ("ret"|"return") expr ("<-" type)?
brk_stmt:  "brk"
cont_stmt: "cont"
loop_stmt: "loop" "(" stmt* ")"

btw_stmt: "btw" list{STRING} // turns into STRING? ;
expr_stmt: expr

dbg_stmt: "dbg" list{_dbg_content}
_dbg_content: IDENT | stmt | item | subject
            | _dbg_content "(" _dbg_content ")"
            |  _c_symbol _dbg_content
            | _dbg_content _c_symbol
            | _dbg_content _c_symbol? _dbg_content

_c_symbol: "."  | "*" | "->" | "^" | "!" | "|" | "&" | "||"
        | "&&" | "+" | "-"  | "*" | "&" | "~" |

// expressions

expr: ("(" (get_expr | fncall_expr    | mthdcall_expr
        | new_expr | litrl_expr     | ref_expr
        | arith_expr) ")")
    | ( get_expr | fncall_expr    | mthdcall_expr
        | new_expr | litrl_expr     | ref_expr
        | arith_expr )

get_expr: "get" "(" subject "," type ")"
        |  subject ("->" type)?
ref_expr: "ref" "(" subject "," type ")"

// FUTURE: add a call expre which auto determins method or fn call
fncall_expr: "fncall" "(" fnname ","  call_params ")"
           | fnname call_params
mthdcall_expr: "mthdcall" "("")"
//mthdcall_expr: "mthdcall" "(" type "," fnname "," selfexpr "," call_params ")"
//selfexpr: "mutself" "(" expr ")" | "self" "(" expr ")"
call_params: list{expr}

new_expr: "new" "(" type "," cntn ")"
        | type cntn
cntn: "cntn" list{expr}
    |  _cntn_list
_cntn_list: "{" expr ("," expr)* ","? "}"
// TODO: add named new syntax

litrl_expr: "litrl" "(" type "," literal ")"
          | type "." "(" literal ")"
          | literal

arith_expr: arithop "(" expr "," expr "," type ")"
          // | expr arithop expr "->" type
arithop: ("add"|"+") -> add
       | ("sub"|"-") -> sub
       | ("mul"|"*") -> mul
       | ("div"|"/") -> div

// "mutselfprx" "(" varname "," vartype ")"

// named idents (for clarity)
meh: "_"
name: IDENT

type: _ref? IDENT
_ref : "&"

mbrtype: type
mbrname: IDENT

vartype: type
varname:IDENT

argname: IDENT
lclname: IDENT

fnname: IDENT
rettype: type

outertype: type



literal: STRING | LONGSTRING | FLOAT | INT

DBG_IDENT: /dbg_[_A-z0-9]*/
IDENT: /[_A-z][_A-z0-9]*/

STRING: /("(?!"").*?(?<!\\)(\\\\)*?"|'(?!'').*?(?<!\\)(\\\\)*?')/i
LONGSTRING: /(""".*?(?<!\\)(\\\\)*?"""|'''.*?(?<!\\)(\\\\)*?''')/is
FLOAT: /((\d+\.\d*|\.\d+)(e[-+]?\d+)?|\d+(e[-+]?\d+))/i
INT: /[0-9]+/i


%ignore COMMENT
// %ignore C_MACRO
%ignore /[ \n]+/

C_MACRO: /#[A-z]+ (?:.*\\\r?\n)*[^\n]*\n/ // c #def or #incl macros

COMMENT: MULTILINE_COMMENT | SINGLELINE_COMMENT
MULTILINE_COMMENT: /\/\/[^\n]*/ // single line c comment
SINGLELINE_COMMENT: /\/\*[\s\S]*?\*\// // multi line c comment
