start: item+

// cminus cannot assign to mebers of expression. it must assing to a local

item: classdef | structdef | fndef | // mthddef //| genitem

// genitem: "gen" "(" _genfor (classdef | structdef | fndef | mthddef) ")"
// _genfor: "for" "(" list{type, ","} ")"

list{val}: "(" (val ("," val)* ","?)? ")"
seq{val}: val+


classdef: "class" "("  name "," mbrs ")"
        | "class" name "(" mbrs ")"
structdef: "struct" "(" name "," mbrs ")"
         | "struct" name "(" mbrs ")"
fndef: "fn" "(" fnname "," rettype "," args "," (locals|meh) "," frame ")"
     | "fn"  fnname ":" rettype args "(" (locals|meh) "," frame ")"
     //| "fn" fnname args "->" rettype "(" locals "," frame ")"
//mthddef: "mthd" "(" outtype "," name "," rettype "," args "," locals "," frame ")"

frame: "frame"? "(" stmt+ ")"


// info sets
mbrs: "mbrs" list{mbr}
    | seq{mbr}
mbr: "mbr" "(" mbrname "," type ")"
   | "." mbrname ":" type

args: "args"? list{arg}
arg: "arg" "(" argname "," type ")"
   | argname ":" type

locals: "locals" list{lcl}
lcl: "lcl" "(" lclname "," type ")"
   | lclname ":" type

subject: var | mbrof
var: "var" "(" varname "," vartype")"
   | varname ":" vartype
mbrof: "mbrof" "(" varname "," vartype "," (mbr | mbrs) ")"
     | varname ":" vartype (mbr | mbrs)

// statments
stmt: asn_stmt      | ret_stmt      | brk_stmt
    | cont_stmt     | loop_stmt   //  | dbg_stmt
    | expr_stmt     | rtn_stmt      | rel_stmt
    | btw_stmt      | cond_stmt
    | dropin_stmt

asn_stmt: "asn" "(" subject "," expr "," type ")"
        | subject "=" expr

ret_stmt:  "ret" "(" expr "," type ")"
        | "return" expr
brk_stmt:  "brk" | "break"
cont_stmt: "cont" | "continue"
loop_stmt: "loop" "(" stmt* ")"

rtn_stmt: "rtn" "(" subject ")"
        | "rtn" subject
rel_stmt: "rel" "(" subject ")"
        | "rel" subject

expr_stmt: expr

cond_stmt:  if elif* else?
if: "if" "(" expr "," frame ")"
        | "if" expr frame
elif: "elif" "(" expr "," frame ")"
          | "elif" expr frame
else: "else" "(" frame ")"
          | "else" frame

btw_stmt: "btw" list{STRING} // turns into STRING? ;
dropin_stmt: "dropin" "(" STRING "," CODE ")"
CODE: SINGLECODE | MULTICODE
SINGLECODE: "`" /[^`\n]+/ "`"
MULTICODE: "```" /[^`]+/ "```"

// expressions

// duplicated to make () easier
expr:  get_expr     //| call_expr //fncall_expr    | mthdcall_expr
      | new_expr    | litrl_expr     //| ref_expr
      | op_expr     | rc_expr
 // |("("( get_expr    | call_expr //fncall_expr    | mthdcall_expr
 //      | new_expr    | litrl_expr     //| ref_expr
 //      | op_expr     | rc_expr                           )")")

get_expr: "get" "(" subject "," type ")"
        |  subject //("->" type)?
//ref_expr: "ref" "(" subject "," type ")"

call_expr: _dot_call | _single_call

_single_call: name call_params
_dot_call: subject "." mthdname call_params

call_params: list{expr}

new_expr: "new" "(" type "," cntn ")"
        | type cntn

cntn: "cntn" list{expr}
    | _new_ordered_cntn_list
    | _new_named_cntn_list
_new_ordered_cntn_list: "{" expr ("," expr)* ","? "}"
_new_named_cntn_list:   "{" _new_mbr ("," _new_mbr)* ","? "}"
_new_mbr: mbr "=" expr
// TODO: add named new syntax

litrl_expr: "litrl" "(" type "," literal ")"
          | type "." "(" literal ")"
          | literal

rc_expr: "rc" "." "(" subject ")" // implicit usize return type

triop{l_op, r_op}: expr l_op expr r_op expr
binop{op}: expr op expr
         | "(" op expr expr+ ")"
uniop{op}: op expr

op_expr: binop{or} | binop{and} | uniop{not}
       | triop{cmp_op, cmp_op}
       | binop{cmp_op}
       | binop{binary_op}
       | binop{add} | binop{sub}
       | binop{chev}
       | binop{factor_op}
       | uniop{sub}
       | uniop{bwnot}
       | binop{pow}

or: "or"
and: "and"
not: "not"

py_op: "is" -> is | "is" "not" -> is_not   | "in" -> in | "not" "in" -> not_in
cmp_op:  "<" -> lt | "<=" -> le |  ">" -> gt | ">=" -> ge | "==" -> eq | "!=" -> ne
binary_op: "|" -> bwor | "^" -> bwxor | "&" -> bwand
add: "+"
sub: "-"
chev: "<<" -> lshift | ">>" -> rshift
factor_op: "*" -> mul | "/" -> div | "%" -> mod | "//" -> fdiv
bwnot: "~"
pow: "**"

// named idents (for clarity)
meh: "_"
name: IDENT

type: _ref? IDENT
_ref : "&"

mbrtype: type
mbrname: IDENT

vartype: type
varname:IDENT

argname: IDENT
lclname: IDENT

fnname: IDENT
mthdname: IDENT
rettype: type

literal: STRING | LONGSTRING | FLOAT | INT | TRUE | FALSE

DBG_IDENT: /dbg_[_A-z0-9]*/
IDENT: /[_A-z][_A-z0-9]*/

STRING: /("(?!"").*?(?<!\\)(\\\\)*?"|'(?!'').*?(?<!\\)(\\\\)*?')/i
LONGSTRING: /(""".*?(?<!\\)(\\\\)*?"""|'''.*?(?<!\\)(\\\\)*?''')/is
FLOAT: /((\d+\.\d*|\.\d+)(e[-+]?\d+)?|\d+(e[-+]?\d+))/i
INT: /[0-9]+/i
TRUE: "True"
FALSE: "False"

%ignore COMMENT
// %ignore C_MACRO
%ignore /[ \n]+/

C_MACRO: /#[A-z]+ (?:.*\\\r?\n)*[^\n]*\n/ // c #def or #incl macros

COMMENT: MULTILINE_COMMENT | SINGLELINE_COMMENT
MULTILINE_COMMENT: /\/\/[^\n]*/ // single line c comment
SINGLELINE_COMMENT: /\/\*[\s\S]*?\*\// // multi line c comment
